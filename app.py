import streamlit as st
from PIL import Image
import io
import requests
import pandas as pd
import matplotlib.pyplot as plt
import openai

# --- KONFIGURACJA API ---
OPENAI_API_KEY = st.secrets.get("OPENAI_API_KEY")  # w Streamlit Cloud wpisz sw√≥j klucz w sekcji Secrets
openai.api_key = OPENAI_API_KEY

st.set_page_config(page_title="Licznik kalorii AI", layout="centered")
st.title("üçΩÔ∏è Licznik kalorii ze zdjƒôcia i dziennik posi≈Çk√≥w")

# --- FUNKCJA ANALIZY ZDJƒòCIA PRZEZ OPENAI ---
def analyze_image_openai(image_bytes):
    try:
        # Przyk≈Çad prostego promptu do GPT (w rzeczywisto≈õci mo≈ºesz u≈ºyƒá OpenAI Vision lub innej us≈Çugi)
        # W tym przyk≈Çadzie symulujemy odpowied≈∫ (bo OpenAI Vision jest beta)
        prompt = "Opisz ten posi≈Çek na podstawie zdjƒôcia i podaj przybli≈ºonƒÖ kaloryczno≈õƒá oraz makrosk≈Çadniki w gramach."

        # Zamie≈Ñ zdjƒôcie na base64 lub bytes, ale tu zrobimy uproszczenie
        # W praktyce mo≈ºna wys≈Çaƒá zdjƒôcie do modelu obs≈ÇugujƒÖcego obraz

        # Tymczasowo zwracamy przyk≈ÇadowƒÖ odpowied≈∫
        return {
            "food": "Kanapka z serem i warzywami",
            "calories": 350,
            "protein": 15,
            "fat": 12,
            "carbs": 40
        }
    except Exception as e:
        st.error(f"B≈ÇƒÖd analizy obrazu: {e}")
        return None

# --- INICJALIZACJA DZIENNIKA W SESJI ---
if "meal_log" not in st.session_state:
    st.session_state.meal_log = []

# --- UPLOAD ZDJƒòCIA ---
st.header("1. Zr√≥b zdjƒôcie lub wybierz plik posi≈Çku")
uploaded_file = st.file_uploader("Wgraj zdjƒôcie (jpg, png)", type=["jpg", "jpeg", "png"])

if uploaded_file:
    img = Image.open(uploaded_file)
    st.image(img, caption="Za≈Çadowany posi≈Çek", use_column_width=True)

    if st.button("Analizuj zdjƒôcie AI"):
        bytes_data = uploaded_file.read()
        result = analyze_image_openai(bytes_data)
        if result:
            st.success(f"Rozpoznano: {result['food']}")
            st.write(f"Kalorie: {result['calories']} kcal")
            st.write(f"Bia≈Çko: {result['protein']} g")
            st.write(f"T≈Çuszcz: {result['fat']} g")
            st.write(f"Wƒôglowodany: {result['carbs']} g")

            # Dodajemy do dziennika
            st.session_state.meal_log.append(result)
            st.success("Dodano posi≈Çek do dziennika.")

# --- RƒòCZNE DODAWANIE PRODUKTU ---
st.header("2. Dodaj posi≈Çek rƒôcznie")
with st.form("manual_add_form"):
    food_name = st.text_input("Nazwa posi≈Çku")
    calories = st.number_input("Kalorie (kcal)", min_value=0, step=1)
    protein = st.number_input("Bia≈Çko (g)", min_value=0.0, step=0.1)
    fat = st.number_input("T≈Çuszcz (g)", min_value=0.0, step=0.1)
    carbs = st.number_input("Wƒôglowodany (g)", min_value=0.0, step=0.1)
    submit = st.form_submit_button("Dodaj posi≈Çek")

    if submit:
        new_meal = {
            "food": food_name,
            "calories": calories,
            "protein": protein,
            "fat": fat,
            "carbs": carbs
        }
        st.session_state.meal_log.append(new_meal)
        st.success("Dodano posi≈Çek do dziennika.")

# --- WY≈öWIETLANIE DZIENNIKA ---
st.header("3. Dziennik posi≈Çk√≥w")
if st.session_state.meal_log:
    df = pd.DataFrame(st.session_state.meal_log)
    st.dataframe(df)

    # Sumy makrosk≈Çadnik√≥w
    sum_calories = df["calories"].sum()
    sum_protein = df["protein"].sum()
    sum_fat = df["fat"].sum()
    sum_carbs = df["carbs"].sum()

    st.write(f"**Sumarycznie:** {sum_calories} kcal, Bia≈Çko: {sum_protein} g, T≈Çuszcz: {sum_fat} g, Wƒôglowodany: {sum_carbs} g")

    # --- WYKRES ---
    st.subheader("Statystyki posi≈Çk√≥w (kcal i makrosk≈Çadniki)")

    fig, ax = plt.subplots()
    df_sum = pd.DataFrame({
        "Kalorie": [sum_calories],
        "Bia≈Çko": [sum_protein],
        "T≈Çuszcz": [sum_fat],
        "Wƒôglowodany": [sum_carbs]
    })
    df_sum.plot(kind="bar", ax=ax, rot=0)
    st.pyplot(fig)

else:
    st.info("Dodaj pierwszy posi≈Çek poprzez zdjƒôcie lub rƒôcznie.")


